// Объекты могут быть использованы для построения различных структур данных. 
// Часто встречающаяся структура – список (не путайте с массивом). 
// Список – связанный набор объектов, где первый объект содержит ссылку на второй, второй – на третий, и т.п.

// Списки удобны тем, что они могут делиться частью своей структуры.
// Например, можно сделать два списка, {value: 0, rest: list} и {value: -1, rest: list},
// где list – это ссылка на ранее объявленную переменную.
// Это два независимых списка, при этом у них есть общая структура list, которая включает три последних элемента каждого из них.
// Кроме того, оригинальный список также сохраняет свои свойства как отдельный список из трёх элементов.

// Напишите функцию arrayToList, которая строит такую структуру, получая в качестве аргумента [1, 2, 3],
// а также функцию listToArray, которая создаёт массив из списка.
// Также напишите вспомогательную функцию prepend, которая получает элемент и создаёт новый список,
// где этот элемент добавлен спереди к первоначальному списку, и функцию nth, которая в качестве аргументов принимает список и число,
// а возвращает элемент на заданной позиции в списке, или же undefined в случае отсутствия такого элемента.

// Если ваша версия nth не рекурсивна, тогда напишите её рекурсивную версию.



function arrayToList(array) {
  ar = array.slice(0);
  if (ar.length > 0) {
    var lst = {value: ar.splice(0, 1)[0], rest: arrayToList(ar)};
    return lst;
  };
};

var arr = [];

function listToArray(list) {
  val = (list.value);
  arr.push(val);
  if (list.rest) {
  	listToArray(list.rest);
  };
  return arr;
};

function prepend(val, list) {
  var lst = {value: val, rest: list};
  return lst
};

function nth(list, position) {
  var val = list.value
  if (position != 0) {
    val = nth(list.rest, position -1)
  };
  return val;
};

console.log(prepend(10, prepend(20, null)));
console.log(arrayToList([1, 2, 3]));
console.log(listToArray(arrayToList([1, 2, 3])))
console.log(nth(arrayToList([10, 20, 30]), 1));
